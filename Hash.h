#pragma once

#include <cstdint>

const uint32_t hashTable[256] =
{
	0x3C5F0CEB, 0x67465CEA, 0x09BB5A2C, 0x377B67B7, 0x00563BF7, 0x62707630, 0x5B823037, 0x79257731,
	0x086C2B35, 0x475A04FD, 0x4EF43A04, 0x63023ACB, 0x7CBC241C, 0x4FF50381, 0x467F5045, 0x0BE545BF,
	0x53A570B7, 0x1693111F, 0x28143A7F, 0x4A4230BB, 0x60482C24, 0x186C46F0, 0x73A6278B, 0x7EB55662,
	0x710D6318, 0x481D5C40, 0x69AF7616, 0x6E795FCA, 0x7E1F0459, 0x30241B10, 0x41AA4D21, 0x2DF220FC,
	0x67EB2142, 0x25652492, 0x709A0482, 0x1B244577, 0x45A57E43, 0x09A805B0, 0x7F825D62, 0x68394CAD,
	0x43C3735E, 0x1E191B86, 0x71EB0ABD, 0x35FF5684, 0x12801CAB, 0x65C647E3, 0x3C6109E5, 0x3E673FD6,
	0x645A5AD5, 0x182575CC, 0x4AF64AFE, 0x0F070EF2, 0x7C94239B, 0x238B6DF9, 0x17BD2983, 0x53993019,
	0x4DB52250, 0x3FB67B56, 0x515034C0, 0x307A0202, 0x2807285C, 0x10445F83, 0x114B4857, 0x2D2C3256,
	0x781A6DB8, 0x57391754, 0x22CF74BC, 0x2ED56A34, 0x153E2175, 0x377D6F52, 0x590037B8, 0x02BD4AAE,
	0x200C4A36, 0x075C6838, 0x758704E9, 0x78D4394B, 0x70DE76B2, 0x33046B77, 0x1F111E40, 0x0E297C83,
	0x16523E33, 0x2F0B4FB2, 0x67CE3C81, 0x27742846, 0x63CB1119, 0x7AE62D43, 0x63F307C7, 0x5B8D5A75,
	0x0FEF5958, 0x337302B4, 0x50385FFE, 0x4DF34767, 0x632A6AF6, 0x35702947, 0x485B7567, 0x19471666,
	0x762A448E, 0x5001196F, 0x0D9B3118, 0x49CE0E2F, 0x00621FCF, 0x072F7F54, 0x5D3D6D79, 0x67F21175,
	0x368751FD, 0x66631F53, 0x570B7EC8, 0x12C16B5F, 0x39167C6F, 0x62EF0A7C, 0x73D00B96, 0x2A6C6C05,
	0x12CB0D10, 0x4E852312, 0x0BDD3548, 0x0AC954F7, 0x472B0EDF, 0x59BE710E, 0x6D871096, 0x55D215B7,
	0x70FC4A6F, 0x2694469C, 0x03A66E0F, 0x4E24583A, 0x70C73667, 0x6AE8349D, 0x0C187293, 0x41815D6A,
	0x2B5D3802, 0x22FE4F23, 0x5E3C7FD8, 0x034F29A7, 0x584F3390, 0x53FC41F8, 0x41786CE6, 0x77170141,
	0x60756CF4, 0x5E6F3518, 0x53B40E9B, 0x2B063500, 0x4C683824, 0x60C50132, 0x7FDC1027, 0x026F3E9D,
	0x430779AC, 0x29D4342B, 0x04621B91, 0x70472D46, 0x17F6772C, 0x3B51659B, 0x09B95230, 0x41A7621D,
	0x6A1A77D5, 0x5C5A5B4D, 0x48DB1533, 0x784E1CB9, 0x521F34EF, 0x3BED7DC3, 0x41C41E1A, 0x351C57A4,
	0x20F21A56, 0x236E1CB1, 0x01F4673B, 0x329874DC, 0x2E4756F9, 0x3926037D, 0x7AF1643E, 0x4F6C3A53,
	0x37143D5A, 0x52BE5DC5, 0x68C30AA1, 0x28E41E6E, 0x4C147410, 0x57C86BD9, 0x48772A34, 0x45726489,
	0x50467648, 0x3436073D, 0x5E9D159E, 0x4F2C0972, 0x076B6440, 0x5AE17728, 0x4DC91AD6, 0x5E4C7FE9,
	0x348B23CA, 0x58041508, 0x3D154BAB, 0x53B03D27, 0x487150CF, 0x73BE40FB, 0x0E9E163D, 0x43581554,
	0x202A7DC9, 0x64932657, 0x26032D81, 0x6EEA680E, 0x538A4448, 0x11EC5024, 0x3EE941C1, 0x50311CE9,
	0x13A6256F, 0x66920D9C, 0x5379091A, 0x33996FEA, 0x195B3A74, 0x333726B2, 0x12E017FC, 0x62B50E0B,
	0x23C63523, 0x20ED6088, 0x67CE09AD, 0x5EBA01BB, 0x06CA305B, 0x33AD51F7, 0x0EF878C7, 0x2B026F5A,
	0x498E508F, 0x5CD2080B, 0x3D9647B5, 0x278A21C1, 0x54FC3446, 0x1D9B7A85, 0x57E6393A, 0x7B7366B8,
	0x3243349C, 0x39AD5057, 0x37A758EB, 0x0F843B7E, 0x595675BF, 0x798E742B, 0x029F33AF, 0x18A74945,
	0x0F6B4773, 0x7D2A78DD, 0x11156046, 0x326831B3, 0x557C558E, 0x1E524DFC, 0x645757BF, 0x09792B62,
	0x66C9287D, 0x6339444D, 0x2D361E01, 0x16306E61, 0x475475BD, 0x00F56248, 0x62853A43, 0x670770B1,
	0x62644063, 0x6E040898, 0x679D7F93, 0x7B1C72C8, 0x39034995, 0x04C4669F, 0x42DC2553, 0x2CAF5C12
};

const uint8_t xorTable[1024] =
{
	0xEB, 0x0C, 0x5F, 0x3C, 0xEA, 0x5C, 0x46, 0x67, 0x2C, 0x5A, 0xBB, 0x09, 0xB7, 0x67, 0x7B, 0x37,
	0xF7, 0x3B, 0x56, 0x00, 0x30, 0x76, 0x70, 0x62, 0x37, 0x30, 0x82, 0x5B, 0x31, 0x77, 0x25, 0x79,
	0x35, 0x2B, 0x6C, 0x08, 0xFD, 0x04, 0x5A, 0x47, 0x04, 0x3A, 0xF4, 0x4E, 0xCB, 0x3A, 0x02, 0x63,
	0x1C, 0x24, 0xBC, 0x7C, 0x81, 0x03, 0xF5, 0x4F, 0x45, 0x50, 0x7F, 0x46, 0xBF, 0x45, 0xE5, 0x0B,
	0xB7, 0x70, 0xA5, 0x53, 0x1F, 0x11, 0x93, 0x16, 0x7F, 0x3A, 0x14, 0x28, 0xBB, 0x30, 0x42, 0x4A,
	0x24, 0x2C, 0x48, 0x60, 0xF0, 0x46, 0x6C, 0x18, 0x8B, 0x27, 0xA6, 0x73, 0x62, 0x56, 0xB5, 0x7E,
	0x18, 0x63, 0x0D, 0x71, 0x40, 0x5C, 0x1D, 0x48, 0x16, 0x76, 0xAF, 0x69, 0xCA, 0x5F, 0x79, 0x6E,
	0x59, 0x04, 0x1F, 0x7E, 0x10, 0x1B, 0x24, 0x30, 0x21, 0x4D, 0xAA, 0x41, 0xFC, 0x20, 0xF2, 0x2D,
	0x42, 0x21, 0xEB, 0x67, 0x92, 0x24, 0x65, 0x25, 0x82, 0x04, 0x9A, 0x70, 0x77, 0x45, 0x24, 0x1B,
	0x43, 0x7E, 0xA5, 0x45, 0xB0, 0x05, 0xA8, 0x09, 0x62, 0x5D, 0x82, 0x7F, 0xAD, 0x4C, 0x39, 0x68,
	0x5E, 0x73, 0xC3, 0x43, 0x86, 0x1B, 0x19, 0x1E, 0xBD, 0x0A, 0xEB, 0x71, 0x84, 0x56, 0xFF, 0x35,
	0xAB, 0x1C, 0x80, 0x12, 0xE3, 0x47, 0xC6, 0x65, 0xE5, 0x09, 0x61, 0x3C, 0xD6, 0x3F, 0x67, 0x3E,
	0xD5, 0x5A, 0x5A, 0x64, 0xCC, 0x75, 0x25, 0x18, 0xFE, 0x4A, 0xF6, 0x4A, 0xF2, 0x0E, 0x07, 0x0F,
	0x9B, 0x23, 0x94, 0x7C, 0xF9, 0x6D, 0x8B, 0x23, 0x83, 0x29, 0xBD, 0x17, 0x19, 0x30, 0x99, 0x53,
	0x50, 0x22, 0xB5, 0x4D, 0x56, 0x7B, 0xB6, 0x3F, 0xC0, 0x34, 0x50, 0x51, 0x02, 0x02, 0x7A, 0x30,
	0x5C, 0x28, 0x07, 0x28, 0x83, 0x5F, 0x44, 0x10, 0x57, 0x48, 0x4B, 0x11, 0x56, 0x32, 0x2C, 0x2D,
	0xB8, 0x6D, 0x1A, 0x78, 0x54, 0x17, 0x39, 0x57, 0xBC, 0x74, 0xCF, 0x22, 0x34, 0x6A, 0xD5, 0x2E,
	0x75, 0x21, 0x3E, 0x15, 0x52, 0x6F, 0x7D, 0x37, 0xB8, 0x37, 0x00, 0x59, 0xAE, 0x4A, 0xBD, 0x02,
	0x36, 0x4A, 0x0C, 0x20, 0x38, 0x68, 0x5C, 0x07, 0xE9, 0x04, 0x87, 0x75, 0x4B, 0x39, 0xD4, 0x78,
	0xB2, 0x76, 0xDE, 0x70, 0x77, 0x6B, 0x04, 0x33, 0x40, 0x1E, 0x11, 0x1F, 0x83, 0x7C, 0x29, 0x0E,
	0x33, 0x3E, 0x52, 0x16, 0xB2, 0x4F, 0x0B, 0x2F, 0x81, 0x3C, 0xCE, 0x67, 0x46, 0x28, 0x74, 0x27,
	0x19, 0x11, 0xCB, 0x63, 0x43, 0x2D, 0xE6, 0x7A, 0xC7, 0x07, 0xF3, 0x63, 0x75, 0x5A, 0x8D, 0x5B,
	0x58, 0x59, 0xEF, 0x0F, 0xB4, 0x02, 0x73, 0x33, 0xFE, 0x5F, 0x38, 0x50, 0x67, 0x47, 0xF3, 0x4D,
	0xF6, 0x6A, 0x2A, 0x63, 0x47, 0x29, 0x70, 0x35, 0x67, 0x75, 0x5B, 0x48, 0x66, 0x16, 0x47, 0x19,
	0x8E, 0x44, 0x2A, 0x76, 0x6F, 0x19, 0x01, 0x50, 0x18, 0x31, 0x9B, 0x0D, 0x2F, 0x0E, 0xCE, 0x49,
	0xCF, 0x1F, 0x62, 0x00, 0x54, 0x7F, 0x2F, 0x07, 0x79, 0x6D, 0x3D, 0x5D, 0x75, 0x11, 0xF2, 0x67,
	0xFD, 0x51, 0x87, 0x36, 0x53, 0x1F, 0x63, 0x66, 0xC8, 0x7E, 0x0B, 0x57, 0x5F, 0x6B, 0xC1, 0x12,
	0x6F, 0x7C, 0x16, 0x39, 0x7C, 0x0A, 0xEF, 0x62, 0x96, 0x0B, 0xD0, 0x73, 0x05, 0x6C, 0x6C, 0x2A,
	0x10, 0x0D, 0xCB, 0x12, 0x12, 0x23, 0x85, 0x4E, 0x48, 0x35, 0xDD, 0x0B, 0xF7, 0x54, 0xC9, 0x0A,
	0xDF, 0x0E, 0x2B, 0x47, 0x0E, 0x71, 0xBE, 0x59, 0x96, 0x10, 0x87, 0x6D, 0xB7, 0x15, 0xD2, 0x55,
	0x6F, 0x4A, 0xFC, 0x70, 0x9C, 0x46, 0x94, 0x26, 0x0F, 0x6E, 0xA6, 0x03, 0x3A, 0x58, 0x24, 0x4E,
	0x67, 0x36, 0xC7, 0x70, 0x9D, 0x34, 0xE8, 0x6A, 0x93, 0x72, 0x18, 0x0C, 0x6A, 0x5D, 0x81, 0x41,
	0x02, 0x38, 0x5D, 0x2B, 0x23, 0x4F, 0xFE, 0x22, 0xD8, 0x7F, 0x3C, 0x5E, 0xA7, 0x29, 0x4F, 0x03,
	0x90, 0x33, 0x4F, 0x58, 0xF8, 0x41, 0xFC, 0x53, 0xE6, 0x6C, 0x78, 0x41, 0x41, 0x01, 0x17, 0x77,
	0xF4, 0x6C, 0x75, 0x60, 0x18, 0x35, 0x6F, 0x5E, 0x9B, 0x0E, 0xB4, 0x53, 0x00, 0x35, 0x06, 0x2B,
	0x24, 0x38, 0x68, 0x4C, 0x32, 0x01, 0xC5, 0x60, 0x27, 0x10, 0xDC, 0x7F, 0x9D, 0x3E, 0x6F, 0x02,
	0xAC, 0x79, 0x07, 0x43, 0x2B, 0x34, 0xD4, 0x29, 0x91, 0x1B, 0x62, 0x04, 0x46, 0x2D, 0x47, 0x70,
	0x2C, 0x77, 0xF6, 0x17, 0x9B, 0x65, 0x51, 0x3B, 0x30, 0x52, 0xB9, 0x09, 0x1D, 0x62, 0xA7, 0x41,
	0xD5, 0x77, 0x1A, 0x6A, 0x4D, 0x5B, 0x5A, 0x5C, 0x33, 0x15, 0xDB, 0x48, 0xB9, 0x1C, 0x4E, 0x78,
	0xEF, 0x34, 0x1F, 0x52, 0xC3, 0x7D, 0xED, 0x3B, 0x1A, 0x1E, 0xC4, 0x41, 0xA4, 0x57, 0x1C, 0x35,
	0x56, 0x1A, 0xF2, 0x20, 0xB1, 0x1C, 0x6E, 0x23, 0x3B, 0x67, 0xF4, 0x01, 0xDC, 0x74, 0x98, 0x32,
	0xF9, 0x56, 0x47, 0x2E, 0x7D, 0x03, 0x26, 0x39, 0x3E, 0x64, 0xF1, 0x7A, 0x53, 0x3A, 0x6C, 0x4F,
	0x5A, 0x3D, 0x14, 0x37, 0xC5, 0x5D, 0xBE, 0x52, 0xA1, 0x0A, 0xC3, 0x68, 0x6E, 0x1E, 0xE4, 0x28,
	0x10, 0x74, 0x14, 0x4C, 0xD9, 0x6B, 0xC8, 0x57, 0x34, 0x2A, 0x77, 0x48, 0x89, 0x64, 0x72, 0x45,
	0x48, 0x76, 0x46, 0x50, 0x3D, 0x07, 0x36, 0x34, 0x9E, 0x15, 0x9D, 0x5E, 0x72, 0x09, 0x2C, 0x4F,
	0x40, 0x64, 0x6B, 0x07, 0x28, 0x77, 0xE1, 0x5A, 0xD6, 0x1A, 0xC9, 0x4D, 0xE9, 0x7F, 0x4C, 0x5E,
	0xCA, 0x23, 0x8B, 0x34, 0x08, 0x15, 0x04, 0x58, 0xAB, 0x4B, 0x15, 0x3D, 0x27, 0x3D, 0xB0, 0x53,
	0xCF, 0x50, 0x71, 0x48, 0xFB, 0x40, 0xBE, 0x73, 0x3D, 0x16, 0x9E, 0x0E, 0x54, 0x15, 0x58, 0x43,
	0xC9, 0x7D, 0x2A, 0x20, 0x57, 0x26, 0x93, 0x64, 0x81, 0x2D, 0x03, 0x26, 0x0E, 0x68, 0xEA, 0x6E,
	0x48, 0x44, 0x8A, 0x53, 0x24, 0x50, 0xEC, 0x11, 0xC1, 0x41, 0xE9, 0x3E, 0xE9, 0x1C, 0x31, 0x50,
	0x6F, 0x25, 0xA6, 0x13, 0x9C, 0x0D, 0x92, 0x66, 0x1A, 0x09, 0x79, 0x53, 0xEA, 0x6F, 0x99, 0x33,
	0x74, 0x3A, 0x5B, 0x19, 0xB2, 0x26, 0x37, 0x33, 0xFC, 0x17, 0xE0, 0x12, 0x0B, 0x0E, 0xB5, 0x62,
	0x23, 0x35, 0xC6, 0x23, 0x88, 0x60, 0xED, 0x20, 0xAD, 0x09, 0xCE, 0x67, 0xBB, 0x01, 0xBA, 0x5E,
	0x5B, 0x30, 0xCA, 0x06, 0xF7, 0x51, 0xAD, 0x33, 0xC7, 0x78, 0xF8, 0x0E, 0x5A, 0x6F, 0x02, 0x2B,
	0x8F, 0x50, 0x8E, 0x49, 0x0B, 0x08, 0xD2, 0x5C, 0xB5, 0x47, 0x96, 0x3D, 0xC1, 0x21, 0x8A, 0x27,
	0x46, 0x34, 0xFC, 0x54, 0x85, 0x7A, 0x9B, 0x1D, 0x3A, 0x39, 0xE6, 0x57, 0xB8, 0x66, 0x73, 0x7B,
	0x9C, 0x34, 0x43, 0x32, 0x57, 0x50, 0xAD, 0x39, 0xEB, 0x58, 0xA7, 0x37, 0x7E, 0x3B, 0x84, 0x0F,
	0xBF, 0x75, 0x56, 0x59, 0x2B, 0x74, 0x8E, 0x79, 0xAF, 0x33, 0x9F, 0x02, 0x45, 0x49, 0xA7, 0x18,
	0x73, 0x47, 0x6B, 0x0F, 0xDD, 0x78, 0x2A, 0x7D, 0x46, 0x60, 0x15, 0x11, 0xB3, 0x31, 0x68, 0x32,
	0x8E, 0x55, 0x7C, 0x55, 0xFC, 0x4D, 0x52, 0x1E, 0xBF, 0x57, 0x57, 0x64, 0x62, 0x2B, 0x79, 0x09,
	0x7D, 0x28, 0xC9, 0x66, 0x4D, 0x44, 0x39, 0x63, 0x01, 0x1E, 0x36, 0x2D, 0x61, 0x6E, 0x30, 0x16,
	0xBD, 0x75, 0x54, 0x47, 0x48, 0x62, 0xF5, 0x00, 0x43, 0x3A, 0x85, 0x62, 0xB1, 0x70, 0x07, 0x67,
	0x63, 0x40, 0x64, 0x62, 0x98, 0x08, 0x04, 0x6E, 0x93, 0x7F, 0x9D, 0x67, 0xC8, 0x72, 0x1C, 0x7B,
	0x95, 0x49, 0x03, 0x39, 0x9F, 0x66, 0xC4, 0x04, 0x53, 0x25, 0xDC, 0x42, 0x12, 0x5C, 0xAF, 0x2C
};

namespace Hash
{
	uint32_t EncodeU16(uint16_t u16);
	uint32_t FromBuffer(const unsigned char *buffer, int len);
	uint32_t FromBufferBool(const unsigned char *buffer, int len);
	uint32_t FromStr(const char *str);
	uint32_t FromStr(const char *str, int len);
	uint32_t Lookup(uint8_t val);
	void XorBuffer(uint8_t *buffer, int len, uint32_t val);
};